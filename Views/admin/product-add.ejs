

    <!-- Load Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />

    <!-- Load Cropper.js CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs@1.5.12/dist/cropper.min.css" />

    <!-- Load Bootstrap JS (with Popper.js) -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    <!-- Load Cropper.js JS -->
    <script src="https://cdn.jsdelivr.net/npm/cropperjs@1.5.12/dist/cropper.min.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" rel="stylesheet">
<%- include("../../views/partials/admin/header") %>

    <style>
        /* Cropper Modal Styles */
        .preview-item {
            position: relative;
            display: inline-block;
            margin-right: 10px;
            margin-bottom: 10px;
            vertical-align: top;
        }
        .preview-item img {
            width: 100px;
            height: 100px;
            object-fit: cover;
            border: 1px solid #ddd;
        }
        .preview-item .btn {
            position: absolute;
            top: 0;
            padding: 2px 6px;
            font-size: 12px;
            z-index: 1;
        }
        .preview-item .btn-crop {
            left: 0;
            background-color: #0d6efd;
            color: white;
        }
        .preview-item .btn-remove {
            right: 0;
            background-color: #dc3545;
            color: white;
        }
        .img-container {
            max-height: 400px;
            width: 100%;
            overflow: auto;
            text-align: center;
            position: relative;
            background: #f0f0f0;
        }
        .img-container img {
            max-width: 100%;
            max-height: 400px;
            display: block;
            margin: 0 auto;
            min-width: 200px;
        }
        #imageCropModal .modal-body {
            padding: 15px;
            overflow: hidden;
        }
        #imageCropModal .modal-dialog {
            max-width: 90%;
            margin: 1.75rem auto;
        }
        .cropper-container {
            width: 100% !important;
            height: 400px !important;
            overflow: hidden !important;
        }
        .cropper-container:hover {
            cursor: default !important;
        }
        .cropper-crop-box,
        .cropper-view-box {
            outline: none !important;
            border: 1px solid #0d6efd !important;
        }
        .cropper-drag-box {
            background-color: transparent !important;
        }

        /* Form Styles */
        .error-message {
            color: red;
            font-size: 0.875rem;
            margin-top: 4px;
            display: block;
        }
        .thumbnails-container {
            display: flex;
            overflow-x: auto;
            padding: 15px;
            gap: 10px;
            background: #f8f9fa;
            border-radius: 5px;
            min-height: 100px;
            margin-bottom: 15px;
        }
        .thumbnail {
            width: 100px;
            height: 100px;
            object-fit: cover;
            border-radius: 4px;
            border: 2px solid #dee2e6;
            transition: transform 0.2s;
            cursor: pointer;
        }
        .thumbnail:hover {
            transform: scale(1.05);
            border-color: #0d6efd;
        }
        .variant {
            margin-bottom: 20px;
            border: 1px solid #dee2e6;
            padding: 15px;
            border-radius: 8px;
            background: #fff;
            position: relative;
        }
        .variant label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
            color: #333;
        }
        .variant input,
        .variant select {
            margin-bottom: 15px;
            padding: 8px;
            border: 1px solid #dee2e6;
            border-radius: 4px;
            width: 100%;
            transition: border-color 0.2s;
        }
        .variant input:focus,
        .variant select:focus {
            border-color: #0d6efd;
            outline: none;
        }
        .image-preview {
            max-width: 300px;
            max-height: 300px;
            margin: 15px 0;
            border: 2px dashed #dee2e6;
            border-radius: 8px;
            display: none;
            object-fit: contain;
        }
        .image-container {
            margin-bottom: 20px;
            padding: 20px;
            border: 1px solid #dee2e6;
            border-radius: 8px;
            background: #fff;
        }
        .btn-add-variant {
            background: #0d6efd;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 4px;
            cursor: pointer;
            margin-bottom: 20px;
            transition: background-color 0.2s;
        }
        .btn-add-variant:hover {
            background: #0b5ed7;
        }
        .btn-remove-variant {
            background: #dc3545;
            color: white;
            border: none;
            padding: 4px 8px;
            border-radius: 4px;
            cursor: pointer;
            position: absolute;
            right: 10px;
            top: 10px;
            transition: background-color 0.2s;
        }
        .btn-remove-variant:hover {
            background: #bb2d3b;
        }
        .image-cropper {
            margin: 20px 0;
            padding: 15px;
            border: 1px solid #dee2e6;
            border-radius: 8px;
            background: #fff;
            display: none;
        }
        .cropper-container {
            max-width: 100%;
            max-height: 500px;
        }
        .image-upload-container {
            background-color: #f8f9fa;
            border-radius: 8px;
            padding: 15px;
            height: 100%;
        }
        .preview-container {
            width: 100%;
            height: 200px;
            border: 1px dashed #ccc;
            display: flex;
            align-items: center;
            justify-content: center;
            background-color: #fff;
            overflow: hidden;
            margin-bottom: 10px;
        }
        .preview-container img {
            max-width: 100%;
            max-height: 100%;
            object-fit: contain;
        }
        .error-message {
            color: #dc3545;
            font-size: 0.875rem;
            margin-top: 5px;
        }
    </style>

    <section class="content-main" style="    margin-left: var(--sidebar-width);
    padding: 25px;"  >
        <div class="row">
            <div class="col-12">
                <div class="content-header">
                    <h2 class="content-title">Add New Product</h2>
                </div>
            </div>
            <div class="col-12">
                <div class="card mb-4">
                    <div class="card-body">
                        <form id="productForm" enctype="multipart/form-data">
                            <div class="row">
                                <!-- Left column - Basic Info -->
                                <div class="col-md-6">
                                    <div class="mb-4">
                                        <label for="product_name" class="form-label">Product Name</label>
                                        <input type="text" placeholder="Enter product name"  name="productName" class="form-control" id="product_name" >
                                        <div id="productName-error" class="error-message"></div>
                                    </div>

                                    <div class="mb-4">
                                        <label class="form-label">Description</label>
                                        <textarea placeholder="Enter product description"  id="descriptionid" name="description" class="form-control" rows="4" >
            
                                        </textarea>
                                        <div id="description-error" class="error-message"></div>
                                    </div>

                                    <!-- Category Selection -->
                                    <div class="mb-4">
                                        <label class="form-label">Category</label>
                                        <select class="form-select" id="category" name="category">
                                            <option value="">Select Category</option>
                                            <% for(let i=0; i<cat.length; i++) { %>
                                                <option value="<%=cat[i].name%>"><%=cat[i].name%></option>
                                            <% } %>
                                        </select>
                                        <div id="category-error" class="error-message"></div>
                                    </div>
                                </div>


                                <!-- Right column - Image Upload -->
                                <div class="col-md-6">
                                    <div class="mb-4">
                                        <div id="fileReadError" class="error-message" style="color: red; margin-top: 10px;"></div>

                                        <label class="form-label">Upload Product Images</label>
                                        <div class="image-upload-container">
                                            <div id="imagesPreviewContainer" class="d-flex flex-wrap mb-2"></div>
                                            <input
                                                class="form-control"
                                                type="file"
                                                name="productImages"
                                                id="productImagesInput"
                                                accept="image/png, image/jpeg, image/jpg"
                                                multiple
                                                onchange="handleImageUpload(event)"
                                            />
                                            <small class="text-muted">Please select 3-4 images</small>
                                            <span id="productImagesError" class="error-message" style="color: red;"></span>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Image Cropping Modal -->
                            <div class="modal fade" id="imageCropModal" tabindex="-1" aria-labelledby="cropModalLabel" aria-hidden="true">
                                <div class="modal-dialog modal-lg">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <h5 class="modal-title" id="cropModalLabel">Crop Image</h5>
                                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                        </div>
                                        <div class="modal-body">
                                            <div class="img-container">
                                                <img id="cropImage" src="" alt="Image to crop" />
                                            </div>
                                        </div>
                                        <div class="modal-footer">
                                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                                            <button type="button" class="btn btn-primary" id="cropButton">Crop & Save</button>
                                            <div id="cropError" class="error-message" style="color: red; margin-top: 10px;"></div>

                                        </div>
                                    </div>
                                </div>
                            </div>

                           
                                                    <div class="col-md-6 mb-2">
                                                        <label class="form-label">Quantity</label>
                                                        <input name="quantity" type="number"  class="form-control variant-quantity" placeholder="Quantity" min="0" id="quantity" >
                                                          <div id="quantity-error" class="error-message"></div>
                                                        
                                                    </div>


                                                    <div class="col-md-6 mb-2">
                                                        <label class="form-label">Regular Price</label>
                                                        <input name="regularPrice" type="number" class="form-control variant-regular-price" placeholder="$" id="regularPrice">
                                                          <div id="regularPrice-error" class="error-message"></div>
                                                    </div>
                                                    <div class="col-md-6 mb-2">
                                                        <label class="form-label">Sale Price</label>
                                                        <input name="salesPrice" type="number"class="form-control variant-sales-price" placeholder="$" id="salesPrice">
                                                          <div id="salesPrice-error" class="error-message"></div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        
                                
          <div id="formError" class="error-message" style="color: red; margin-top: 10px;"></div>
              <div class="text-end">
                                <button type="button" class="btn btn-secondary me-2" onclick="resetForm()">Reset</button>
                                <div id="removeProductMessage" style="margin-top: 10px; font-size: 14px;"></div>
                                <button type="button" class="btn btn-danger me-2" id="removeProduct" style="display: none;">Remove Product</button>
                                <button class="btn btn-primary" type="submit">Publish Product</button>
                            </div>
                        </form>
                    </div>
                </div>  
            </div>
        </div>
    </section>

    <script>
        let uploadedImages = [];
        let cropper = null;
        let currentImageIndex = null;
        let selectedProductImages = [];

        document.addEventListener('DOMContentLoaded', function () {
            initializeForm();
            setupFormValidation();
         

            const form = document.querySelector('form');
       

            if (form) {
              
    form.addEventListener('submit', async function (event) {
        event.preventDefault();

const imageError = document.getElementById('productImagesError');
imageError.textContent = ''; 

if (selectedProductImages.length < 3) {
    imageError.textContent = 'Please select at least 3 product images.';
    return;
}

      

        const formElements = this.elements;
        const payload = {};
      

        for (let i = 0; i < formElements.length; i++) {
            const element = formElements[i];
            console.log(element,"this is ")
            if (element.name && element.type !== 'file') {
                payload[element.name] = element.value;
            }
        }

      
        const toBase64 = (file) =>
            new Promise((resolve, reject) => {
                const reader = new FileReader();
                reader.readAsDataURL(file);
                reader.onload = () => resolve(reader.result);
                reader.onerror = (error) => reject(error);
            });
          

        try {
            const base64Images = await Promise.all(
                selectedProductImages.map((file) => toBase64(file))
            );
            

            payload.productImages = base64Images;
        




          
            fetch('/admin/addProducts', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(payload),
            })

                .then((response) => {
                  
                    if (!response.ok) {
                        return response.text().then((text) => {
                            const data = JSON.parse(text);
                            throw new Error(data.error || 'Upload failed');
                        });
                    }
                    return response.json();
                })
                .then((data) => {
                  const formError = document.getElementById('formError');
                    formError.textContent = ''; 
                    if (data.success) {
                        window.location.href = '/admin/products';
                    } else {
                      formError.textContent = data.error || 'An error occurred while saving the product'
                    }
                })
                .catch((error) => {
                   

                    const formError = document.getElementById('formError');
                     formError.textContent = error.message || 'Something went wrong. Please try again.';
                    console.error('Error:', error);
                 
                    submitBtn.disabled = false;
                    submitBtn.innerHTML = originalText;
                });

        } catch (error) {
            console.error('Image conversion failed:', error);
             const formError = document.getElementById('formError');
             formError.textContent = 'Failed to convert images. Please try again with different files '
        }
    });
}

          
        });

        function initializeForm() {
       

            const productId = new URLSearchParams(window.location.search).get('id');
            if (productId) {
                loadProductData(productId);
                document.getElementById('removeProduct').style.display = 'inline-block';
            }

            document.getElementById('removeProduct').addEventListener('click', function () {
                if (confirm('Are you sure you want to remove this product? This action cannot be undone.')) {
                    removeProduct();
                }
            });



            const cropError = document.getElementById('cropError');
            cropError.textContent = '';

            document.getElementById('cropButton').addEventListener('click', function () {
                if (!cropper || currentImageIndex === null) {
                    console.error('Cropper or image index not initialized');
                    cropError.textContent = 'Image cropper not initialized. Please select an image and try again.';
                    return;

                }

                const canvas = cropper.getCroppedCanvas({
                    width: 800,
                    height: 800,
                    imageSmoothingEnabled: true,
                    imageSmoothingQuality: 'high',
                });

                if (canvas) {
                    canvas.toBlob(
                        (blob) => {
                            const croppedFile = new File([blob], selectedProductImages[currentImageIndex].name, {
                                type: 'image/jpeg',
                            });
                            selectedProductImages[currentImageIndex] = croppedFile;

                            renderPreviews();

                            const cropModal = bootstrap.Modal.getInstance(document.getElementById('imageCropModal'));
                            if (cropModal) {
                                cropModal.hide();
                            }
                            if (cropper) {
                                cropper.destroy();
                                cropper = null;
                            }
                            currentImageIndex = null;
                        },
                        'image/jpeg',
                        0.9
                    );
                } else {
                    console.error('Failed to get cropped canvas');
                    cropError.textContent='Failed to crop image. Please adjust the crop area and try again.';
                }
            });

    
            document.querySelector('#imageCropModal .btn-secondary').addEventListener('click', function () {
                if (cropper) {
                    cropper.destroy();
                    cropper = null;
                }
                currentImageIndex = null;
                const cropModal = bootstrap.Modal.getInstance(document.getElementById('imageCropModal'));
                if (cropModal) {
                    cropModal.hide();
                }
            });
        }

        function handleImageUpload(event) {
            const files = event.target.files;
            if (!files || files.length === 0) {
                console.log('No files selected');
                return;
            }

            const newFiles = Array.from(files);
            selectedProductImages = [...selectedProductImages, ...newFiles];

            renderPreviews();

            event.target.value = '';
            console.log('Selected images:', selectedProductImages.length);
        }

        function renderPreviews() {
            const container = document.getElementById('imagesPreviewContainer');
            container.innerHTML = '';

            const fileCount = selectedProductImages.length;
            const validationMessage = document.createElement('div');
            validationMessage.className = 'w-100 mb-2';
            if (fileCount < 3) {
                validationMessage.innerHTML = `<p class="text-danger">Please select at least 3 images (${fileCount} selected)</p>`;
            } else {
                validationMessage.innerHTML = `<p class="text-success">${fileCount} images selected</p>`;
            }
            container.appendChild(validationMessage);

            selectedProductImages.forEach((file, index) => {
                const reader = new FileReader();
                reader.onload = function (e) {
                    const thumbnailDiv = document.createElement('div');
                    thumbnailDiv.className = 'preview-item';

                    const img = document.createElement('img');
                    img.src = e.target.result;
                    img.alt = 'Product Image';
                    img.style.width = '100px';
                    img.style.height = '100px';
                    img.style.objectFit = 'cover';

                    const cropBtn = document.createElement('button');
                    cropBtn.type = 'button';
                    cropBtn.className = 'btn btn-sm btn-crop';
                    cropBtn.textContent = 'Crop';
                    cropBtn.addEventListener('click', function () {
                        currentImageIndex = index;
                        const cropImage = document.getElementById('cropImage');
                        cropImage.src = e.target.result;

                      
                        cropImage.onload = function () {
                            const cropModal = new bootstrap.Modal(document.getElementById('imageCropModal'));
                            cropModal.show();

                            cropModal._element.addEventListener(
                                'shown.bs.modal',
                                function () {
                                    if (cropper) {
                                        cropper.destroy();
                                    }
                                    cropper = new Cropper(cropImage, {
                                        aspectRatio: 1,
                                        viewMode: 1,
                                        dragMode: 'move',
                                        autoCropArea: 0.8,
                                        restore: false,
                                        guides: true,
                                        center: true,
                                        highlight: false,
                                        cropBoxMovable: true,
                                        cropBoxResizable: true,
                                        toggleDragModeOnDblclick: false,
                                        responsive: true,
                                        autoCrop: true,
                                        minContainerWidth: 300,
                                        minContainerHeight: 400,
                                        ready: function () {
                                            console.log('Cropper initialized successfully for image index:', currentImageIndex);
                                        },
                                    });
                                },
                                { once: true }
                            );
                        };
                        cropImage.onerror = function () {
                            console.error('Failed to load image for cropping');
                           cropError.textContent='Failed to load image for cropping. Please try another image.';
                        };
                    });

                    const removeBtn = document.createElement('button');
                    removeBtn.type = 'button';
                    removeBtn.className = 'btn btn-sm btn-remove';
                    removeBtn.innerHTML = '×';
                    removeBtn.addEventListener('click', function () {
                        selectedProductImages.splice(index, 1);
                        renderPreviews();
                        if (selectedProductImages.length === 0) {
                            document.getElementById('productImagesInput').value = '';
                        }
                    });

                    thumbnailDiv.appendChild(img);
                    thumbnailDiv.appendChild(cropBtn);
                    thumbnailDiv.appendChild(removeBtn);
                    container.appendChild(thumbnailDiv);
                };
                reader.readAsDataURL(file);
                reader.onerror = function () {
                    console.error('Failed to read file:', file.name);
                     const fileReadError = document.getElementById('fileReadError');
                     if (fileReadError) {
                    fileReadError.textContent = 'Failed to read file: ' + file.name + '. Please try another file.';
    }
                };
            });
        }

      

        function updateVariantsData() {
            const variants = [];
            const variantItems = document.querySelectorAll('.variant-item');

            variantItems.forEach((item) => {
                
                const quantity = parseInt(item.querySelector('.variant-quantity').value) || 0;
                const regularPrice = parseFloat(item.querySelector('.variant-regular-price').value) || 0;
                const salesPrice = parseFloat(item.querySelector('.variant-sales-price').value) || 0;

                if (size) {
                    variants.push({
                    
                        quantity,
                        regularPrice,
                        salesPrice,
                    });
                }
            });

            document.getElementById('variants-data').value = JSON.stringify(variants);
            console.log('Updated variants data:', document.getElementById('variants-data').value);
        }

        function resetForm() {
            document.getElementById('productForm').reset();
            document.getElementById('variants').innerHTML = '';
            document.getElementById('imagesPreviewContainer').innerHTML = '';

            uploadedImages = [];
            selectedProductImages = [];
            updateVariantsData();
        }

        function loadProductData(productId) {
            fetch(`/admin/product/${productId}`)
                .then((response) => response.json())
                .then((product) => {
                    document.getElementById('product_name').value = product.productName;
                    document.getElementById('descriptionid').value = product.description;

                    const categorySelect = document.getElementById('category');
                    for (let i = 0; i < categorySelect.options.length; i++) {
                        if (categorySelect.options[i].value === product.category) {
                            categorySelect.selectedIndex = i;
                            break;
                        }
                    }

               
                    if (product.productImage && product.productImage.length > 0) {
                        if (product.productImage.length <= 4) {
                            product.productImage.forEach((imageUrl, index) => {
                                loadImageIntoContainer(imageUrl, index + 1);
                            });
                        } else {
                            loadProductImages(product.productImage);
                        }
                    }
                })
                .catch((error) => {
                    console.error('Error loading product data:', error);
                    alert('Failed to load product data. Please try again.');
                });
        }

        function loadImageIntoContainer(imageUrl, containerIndex) {
            if (containerIndex < 1 || containerIndex > 4) return;

            const previewContainer = document.getElementById(`previewContainer${containerIndex}`);
            if (previewContainer) {
                previewContainer.innerHTML = '';

                const img = document.createElement('img');
                img.src = imageUrl;
                img.classList.add('img-fluid');
                img.style.maxHeight = '100%';
                img.style.maxWidth = '100%';
                previewContainer.appendChild(img);

                const croppedDataInput = document.getElementById(`croppedImageData${containerIndex}`);
                if (croppedDataInput) {
                    croppedDataInput.value = imageUrl;
                }
            }
        }

 
        function loadProductImages(images) {
            const container = document.getElementById('imagesPreviewContainer');
            if (!container) return;

            images.forEach((imageUrl, index) => {
                const imgId = `existing-img-${index}`;

                const thumbnailDiv = document.createElement('div');
                thumbnailDiv.className = 'preview-item';
                thumbnailDiv.id = imgId + '-container';

                const img = document.createElement('img');
                img.src = imageUrl;
                img.alt = 'Product Image';
                img.style.width = '100px';
                img.style.height = '100px';
                img.style.objectFit = 'cover';

                const removeBtn = document.createElement('button');
                removeBtn.type = 'button';
                removeBtn.className = 'btn btn-sm btn-remove';
                removeBtn.innerHTML = '×';
                removeBtn.addEventListener('click', function () {
                    removeUploadedImage(imgId, imageUrl);
                });

                thumbnailDiv.appendChild(img);
                thumbnailDiv.appendChild(removeBtn);
                container.appendChild(thumbnailDiv);

                uploadedImages.push({
                    id: imgId,
                    cloudinaryUrl: imageUrl,
                    isExisting: true,
                });

                fetch(imageUrl)
                    .then((res) => res.blob())
                    .then((blob) => {
                        const file = new File([blob], `existing-image-${index}.jpg`, { type: 'image/jpeg' });
                        selectedProductImages.push(file);
                    });
            });
        }

        function removeUploadedImage(imgId, cloudinaryUrl) {
            const container = document.getElementById(imgId + '-container');
            if (container) {
                container.remove();
            }

            uploadedImages = uploadedImages.filter((img) => img.id !== imgId);
            selectedProductImages = selectedProductImages.filter((_, index) => {
                const existingIndex = uploadedImages.findIndex((img) => img.id === imgId);
                return index !== existingIndex;
            });
            renderPreviews();
        }

        function removeProduct() {
            const productId = new URLSearchParams(window.location.search).get('id');
            if (!productId) return;

            fetch(`/admin/product/${productId}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json',
                },
            })
                .then((response) => {
                   const messageBox = document.getElementById('removeProductMessage');
                    messageBox.textContent = ''; 
                    messageBox.style.color = 'red'; 

                    if (response.ok) {
                       messageBox.style.color = 'green';
                       messageBox.textContent = 'Product successfully removed. Redirecting...';
                       setTimeout(() => {
                       window.location.href = '/admin/products';
                        }, 1500);
                        } else {
                       throw new Error('Failed to remove product');
                        }
                       })
.catch((error) => {
    console.error('Error removing product:', error);
    const messageBox = document.getElementById('removeProductMessage');
    messageBox.style.color = 'red';
    messageBox.textContent = 'Failed to remove product. Please try again.';
});
        }

        
        function setupFormValidation() {
        const form = document.getElementById('productForm');
        const inputs = {
            productName: document.getElementById('product_name'),
            description: document.getElementById('descriptionid'),
            category: document.getElementById('category'),
            quantity:document.getElementById('quantity'),
            regularPrice:document.getElementById('regularPrice'),
            salesPrice:document.getElementById('salesPrice')
        };

        inputs.productName.addEventListener('input', validateProductName);
        inputs.description.addEventListener('input', validateDescription);
        inputs.category.addEventListener('change', validateCategory);
        
      
      

        function validateProductName() {
            const value = inputs.productName.value.trim();
            const errorElement = document.getElementById('productName-error');
            if (!value) {
                errorElement.textContent = 'Product name is required';
                return false;
            } else if (value.length < 3) {
                errorElement.textContent = 'Product name must be at least 3 characters';
                return false;
            } else if (value.length > 100) {
                errorElement.textContent = 'Product name must not exceed 100 characters';
                return false;
            }
            errorElement.textContent = '';
            return true;
        }

        function validateDescription() {
            const value = inputs.description.value.trim();
            const errorElement = document.getElementById('description-error');
            if (!value) {
                errorElement.textContent = 'Description is required';
                return false;
            } else if (value.length < 10) {
                errorElement.textContent = 'Description must be at least 10 characters';
                return false;
            } else if (value.length > 1000) {
                errorElement.textContent = 'Description must not exceed 1000 characters';
                return false;
            }
            errorElement.textContent = '';
            return true;
        }

        function validateCategory() {
            const value = inputs.category.value;
            const errorElement = document.getElementById('category-error');
            if (!value) {
                errorElement.textContent = 'Please select a category';
                return false;
            }
            errorElement.textContent = '';
            return true;
        }

       
          
        

        function validateImages() {
            const errorElement = document.createElement('div');
            errorElement.className = 'error-message';
            const container = document.getElementById('imagesPreviewContainer');
            container.querySelector('.error-message')?.remove();
            container.insertBefore(errorElement, container.firstChild);

            if (selectedProductImages.length < 3) {
                errorElement.textContent = `Please upload at least 3 images (${selectedProductImages.length} selected)`;
                return false;
            }
            if (selectedProductImages.length > 4) {
                errorElement.textContent = `Maximum 4 images allowed (${selectedProductImages.length} selected)`;
                return false;
            }
            for (const file of selectedProductImages) {
                if (file.size > 5 * 1024 * 1024) { 
                    errorElement.textContent = `Image ${file.name} exceeds 5MB limit`;
                    return false;
                }
                if (!['image/png', 'image/jpeg', 'image/jpg'].includes(file.type)) {
                    errorElement.textContent = `Image ${file.name} must be PNG or JPEG`;
                    return false;
                }
            }
            errorElement.textContent = '';
            return true;
        }

    }
   
   </script>


<%- include("../../views/partials/admin/footer") %>