<%- include('../../views/partials/user/header') %>
<link href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<style>
    body {
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif;
        background-color: #ffffff;
        color: #333;
        margin: 0;
    }
    .cart-section {
        padding: 40px 0;
        background-color: #ffffff;
    }
    .cart-header {
        text-transform: uppercase;
        font-size: 18px;
        letter-spacing: 1px;
        margin-bottom: 30px;
        font-weight: 600;
        color: #333;
    }
    .cart-table {
        width: 100%;
        border-collapse: collapse;
    }
    .cart-table td {
        padding: 20px 0;
        border-bottom: 1px solid #e5e5e5;
        vertical-align: top;
        color: #333;
    }
    .cart-table tr:last-child td {
        border-bottom: none;
    }
    .product-img {
        width: 80px;
        height: 80px;
        object-fit: cover;
        border-radius: 4px;
    }
    .product-details {
        padding-left: 20px;
    }
    .product-name {
        font-size: 14px;
        margin: 0 0 5px 0;
        font-weight: 400;
        color: #333;
    }
    .product-variant {
        font-size: 12px;
        color: #666;
        margin: 0;
    }
    .product-price {
        font-size: 14px;
        text-align: right;
        color: #333;
    }
    .quantity-control {
        display: flex;
        align-items: center;
        max-width: 100px;
    }
    .quantity-btn {
        background: #f1f1f1;
        border: 1px solid #e5e5e5;
        width: 30px;
        height: 30px;
        padding: 0;
        font-size: 16px;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        color: #333;
    }
    .quantity-btn:hover {
        background: #e5e5e5;
    }
    .quantity-input {
        max-width: 50px;
        text-align: center;
        border-top: 1px solid #e5e5e5;
        border-bottom: 1px solid #e5e5e5;
        border-left: 0;
        border-right: 0;
        height: 30px;
        padding: 0 5px;
        font-size: 14px;
        color: #333;
    }
    .remove-btn {
        color: #666;
        background: none;
        border: none;
        font-size: 16px;
        padding: 0;
        cursor: pointer;
    }
    .remove-btn:hover {
        color: #333;
    }
    .cart-summary {
        background: #f8f9fa;
        padding: 30px;
        border-radius: 8px;
    }
    .summary-title {
        text-transform: uppercase;
        font-size: 14px;
        letter-spacing: 1px;
        margin-bottom: 20px;
        font-weight: 500;
        color: #333;
    }
    .summary-item {
        display: flex;
        justify-content: space-between;
        margin-bottom: 15px;
        font-size: 14px;
        color: #333;
    }
    .summary-item.total {
        font-weight: 500;
        border-top: 1px solid #e5e5e5;
        padding-top: 15px;
        margin-top: 15px;
    }
    .btn-checkout {
        background: #333;
        color: #ffffff;
        border: none;
        width: 100%;
        padding: 15px;
        font-size: 14px;
        text-transform: uppercase;
        letter-spacing: 1px;
        margin-top: 20px;
        border-radius: 4px;
        cursor: pointer;
    }
    .btn-checkout:hover {
        background: #555;
    }
    .btn-checkout:disabled {
        background: #ccc;
        cursor: not-allowed;
    }
    .btn-continue {
        background: none;
        border: none;
        color: #666;
        text-decoration: underline;
        padding: 0;
        font-size: 14px;
        cursor: pointer;
    }
    .btn-continue:hover {
        color: #333;
    }
    .stock-message {
        font-size: 11px;
        color: #d9534f;
        margin-top: 4px;
    }
    .breadcrumb a {
        color: #333;
        text-decoration: none;
        border-bottom: 2px solid transparent;
        transition: border-bottom 0.3s ease;
    }
    .breadcrumb a:hover {
        color: #555;
        border-bottom: 2px solid #555;
    }
    .bg-light {
        background-color: #f8f9fa;
        margin-bottom: 24px;
    }
</style>

<div class="cart-section">
    <div class="bg-light py-3">
        <div class="container mx-auto px-4">
            <div class="row">
                <div class="col-md-12 mb-0 breadcrumb">
                    <a href="/">Home</a> <span class="mx-2 mb-0">/</span>
                    <a href="/shop">Shop</a> <span class="mx-2 mb-0">/</span>
                    <strong><a href="/cart">Cart</a></strong>
                </div>
            </div>
        </div>
    </div>

    <div class="container mx-auto px-4">
        <h1 class="cart-header">My Shopping Bag</h1>
        <div class="flex flex-wrap -mx-4">
            <div class="w-full md:w-8/12 px-4">
                <table class="cart-table">
                    <tbody>
                        <% if (cartItems && cartItems.length > 0) { %>
                            <% cartItems.forEach(item => { %>
                                <tr>
                                    <td style="width: 80px;">
                                        <img src="<%= item.imageUrl %>" alt="<%= item.name %>" class="product-img">
                                    </td>
                                    <td>
                                        <div class="product-details">
                                            <h3 class="product-name"><%= item.name %></h3>
                                            <p class="product-variant">
                                                Price: ₹<%= item.price.toFixed(2) %>
                                                <% if (item.isBlocked) { %>
                                                    <span style="color: #d9534f;"> (Blocked - Unavailable)</span>
                                                <% } %>
                                            </p>
                                        </div>
                                    </td>
                                    <td style="width: 120px;">
                                        <div class="quantity-control">
                                            <button class="quantity-btn decrement" data-item-id="<%= item.id %>">-</button>
                                            <input type="text" class="quantity-input" readonly value="<%= item.quantity %>"
                                                   data-item-id="<%= item.id %>"
                                                   data-price="<%= item.price %>" data-stock="<%= item.stock %>">
                                            <button class="quantity-btn increment" data-item-id="<%= item.id %>">+</button>
                                        </div>
                                        <div class="stock-message" id="stock-msg-<%= item.id %>"></div>
                                    </td>
                                    <td class="product-price" data-item-id="<%= item.id %>">
                                        ₹<%= (item.price * item.quantity).toFixed(2) %>
                                    </td>
                                    <td style="width: 30px;">
                                        <button class="remove-btn" data-item-id="<%= item.id %>">×</button>
                                    </td>
                                </tr>
                            <% }) %>
                        <% } else { %>
                            <tr>
                                <td colspan="5" style="text-align: center;">Your shopping bag is empty</td>
                            </tr>
                        <% } %>
                    </tbody>
                </table>
                <div style="margin-top: 20px;">
                    <button class="btn-continue" onclick="window.location.href='/shop'">Continue Shopping</button>
                </div>
            </div>
            <div class="w-full md:w-4/12 px-4">
                <div class="cart-summary">
                    <h4 class="summary-title">Summary</h4>
                    <div class="summary-item">
                        <span>Subtotal</span>
                        <span id="subtotal-display">₹<%= subtotal.toFixed(2) %></span>
                    </div>
                    <% if (discount > 0) { %>
                        <div class="summary-item">
                            <span>Discount</span>
                            <span>-₹<%= discount.toFixed(2) %></span>
                        </div>
                    <% } %>
                    <div class="summary-item">
                        <span>Shipping</span>
                        <span>Free</span>
                    </div>
                    <div class="summary-item total">
                        <span>Estimated Total</span>
                        <span id="total-display">₹<%= subtotal.toFixed(2) %></span>
                    </div>
                    <button class="btn-checkout" <%= cartItems.length === 0 ? 'disabled' : '' %>>Checkout</button>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function () {
    function updateCartTotals() {
        let subtotal = 0;
        document.querySelectorAll('.quantity-input').forEach(input => {
            const price = parseFloat(input.dataset.price) || 0;
            const quantity = parseInt(input.value) || 0;
            const itemTotal = price * quantity;
            subtotal += itemTotal;

            const totalCell = input.closest('tr').querySelector('.product-price');
            if (totalCell) {
                totalCell.textContent = `₹${itemTotal.toFixed(2)}`;
            }
        });

        const discount = <%= discount %> || 0;
        const total = subtotal - discount;

        const subtotalElement = document.getElementById('subtotal-display');
        const totalElement = document.getElementById('total-display');

        if (subtotalElement) subtotalElement.textContent = `₹${subtotal.toFixed(2)}`;
        if (totalElement) totalElement.textContent = `₹${total.toFixed(2)}`;
        return { subtotal, total }; // Return values for checkout
    }

    function showStockLimitMessage(itemId, stock) {
        const messageElement = document.getElementById(`stock-msg-${itemId}`);
        if (messageElement) {
            messageElement.textContent = `Stock limit: ${stock}`;
        }

        Swal.fire({
            title: 'Stock Limit Reached',
            text: `Only ${stock} items available in stock`,
            icon: 'warning',
            confirmButtonColor: '#555'
        });

        setTimeout(() => {
            if (messageElement) messageElement.textContent = '';
        }, 3000);
    }

    function showQuantityLimitMessage() {
        Swal.fire({
            title: 'Quantity Limit Reached',
            text: 'Maximum quantity allowed is 5 items.',
            icon: 'warning',
            confirmButtonColor: '#555'
        });
    }

    async function updateCartItem(itemId, quantity) {
        try {
            const response = await fetch(`/cart/update/${itemId}`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ quantity })
            });

            const data = await response.json();
          

            if (response.ok) {
                const input = document.querySelector(`.quantity-input[data-item-id="${itemId}"]`);
                if (input) {
                    input.value = data.quantity;
                    updateCartTotals();
                } else {
                    await syncCart();
                }
            } else if (response.status === 400 && data.message === 'Stock limit reached') {
                const input = document.querySelector(`.quantity-input[data-item-id="${itemId}"]`);
                if (input) {
                    input.value = data.availableStock;
                    updateCartTotals();
                }
                showStockLimitMessage(itemId, data.availableStock);
            } else {
                throw new Error(data.message || 'Error updating cart');
            }
        } catch (error) {
            console.error('Error updating cart:', error);
            Swal.fire({
                title: 'Error',
                text: error.message || 'Failed to update cart',
                icon: 'error',
                confirmButtonColor: '#555'
            });
            await syncCart();
        }
    }

    async function syncCart() {
        try {
            const response = await fetch('/cart');
            const data = await response.json();
         

            if (response.ok && data.success && data.cartItems) {
                const tbody = document.querySelector('.cart-table tbody');
                tbody.innerHTML = data.cartItems.map(item => `
                    <tr>
                        <td style="width: 80px;"><img src="${item.imageUrl}" alt="${item.name}" class="product-img"></td>
                        <td>
                            <div class="product-details">
                                <h3 class="product-name">${item.name}</h3>
                                <p class="product-variant">Price: ₹${item.price.toFixed(2)}${item.isBlocked ? ' <span style="color: #d9534f;">(Blocked - Unavailable)</span>' : ''}</p>
                            </div>
                        </td>
                        <td style="width: 120px;">
                            <div class="quantity-control">
                                <button class="quantity-btn decrement" data-item-id="${item.id}">-</button>
                                <input type="text" class="quantity-input" readonly value="${item.quantity}"
                                       data-item-id="${item.id}" data-price="${item.price}" data-stock="${item.stock}">
                                <button class="quantity-btn increment" data-item-id="${item.id}">+</button>
                            </div>
                            <div class="stock-message" id="stock-msg-${item.id}"></div>
                        </td>
                        <td class="product-price" data-item-id="${item.id}">₹${(item.price * item.quantity).toFixed(2)}</td>
                        <td style="width: 30px;"><button class="remove-btn" data-item-id="${item.id}">×</button></td>
                    </tr>
                `).join('');
                if (data.cartItems.length === 0) {
                    tbody.innerHTML = '<tr><td colspan="5" style="text-align: center;">Your shopping bag is empty</td></tr>';
                    document.querySelector('.btn-checkout').disabled = true;
                }
                updateCartTotals();
                attachEventListeners();
            } else {
                throw new Error('Failed to sync cart');
            }
        } catch (error) {
            console.error('Error syncing cart:', error);
            Swal.fire({
                title: 'Error',
                text: 'Failed to sync cart. Please refresh the page.',
                icon: 'error',
                confirmButtonColor: '#555'
            });
        }
    }

    function attachEventListeners() {
        document.querySelectorAll('.decrement').forEach(button => {
            button.addEventListener('click', async function () {
                const itemId = this.dataset.itemId;
                const input = document.querySelector(`.quantity-input[data-item-id="${itemId}"]`);
                let value = parseInt(input.value) || 0;

                if (value > 1) {
                    await updateCartItem(itemId, value - 1);
                }
            });
        });

        document.querySelectorAll('.increment').forEach(button => {
            button.addEventListener('click', async function () {
                const itemId = this.dataset.itemId;
                const input = document.querySelector(`.quantity-input[data-item-id="${itemId}"]`);
                const stock = parseInt(input.dataset.stock) || 0;
                let value = parseInt(input.value) || 0;
                const maxQuantity = 5;

                if (value < maxQuantity && value < stock) {
                    await updateCartItem(itemId, value + 1);
                } else if (value >= maxQuantity) {
                    showQuantityLimitMessage();
                } else {
                    showStockLimitMessage(itemId, stock);
                }
            });
        });

        document.querySelectorAll('.remove-btn').forEach(button => {
            button.addEventListener('click', async function () {
                const itemId = this.dataset.itemId;
                const row = this.closest('tr');

                const result = await Swal.fire({
                    title: 'Remove Item',
                    text: 'Are you sure you want to remove this item from your cart?',
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#555',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Yes, remove it!',
                    cancelButtonText: 'Cancel'
                });

                if (result.isConfirmed) {
                    try {
                        const response = await fetch(`/cart/update/${itemId}`, {
                            method: 'DELETE',
                            headers: { 'Content-Type': 'application/json' }
                        });
                        const data = await response.json();

                        if (response.ok) {
                            row.remove();
                            updateCartTotals();

                            const remainingRows = document.querySelectorAll('.cart-table tbody tr').length;
                            if (remainingRows === 0) {
                                const tbody = document.querySelector('.cart-table tbody');
                                tbody.innerHTML = `
                                    <tr>
                                        <td colspan="5" style="text-align: center;">Your shopping bag is empty</td>
                                    </tr>
                                `;
                                document.querySelector('.btn-checkout').disabled = true;
                            }

                            await Swal.fire({
                                title: 'Removed!',
                                text: 'Item has been removed from your cart.',
                                icon: 'success',
                                timer: 2000,
                                showConfirmButton: false
                            });
                        } else {
                            throw new Error(data.message || 'Failed to remove item');
                        }
                    } catch (error) {
                        console.error('Error removing item:', error);
                        await Swal.fire({
                            title: 'Error!',
                            text: 'Failed to remove item from cart. Please try again.',
                            icon: 'error',
                            confirmButtonColor: '#555'
                        });
                    }
                }
            });
        });
    }

    document.querySelector('.btn-checkout').addEventListener('click', async function () {
        if (!this.disabled) {
            const cartItems = [];
            document.querySelectorAll('.cart-table tbody tr').forEach(row => {
                const itemId = row.querySelector('.quantity-btn').dataset.itemId;
                const quantityInput = row.querySelector('.quantity-input');
                const quantity = parseInt(quantityInput.value);
                const price = parseFloat(quantityInput.dataset.price);
                const isBlocked = row.querySelector('.product-variant span') !== null;
                const stock = parseInt(quantityInput.dataset.stock);

                cartItems.push({ itemId, quantity, price, isBlocked, stock });
            });

            const hasBlockedItems = cartItems.some(item => item.isBlocked);
            if (hasBlockedItems) {
                Swal.fire({
                    title: 'Checkout Blocked',
                    text: 'Your cart contains blocked items that are no longer available. Please remove them to proceed.',
                    icon: 'error',
                    confirmButtonColor: '#555'
                });
                return;
            }

            let hasOutOfStock = false;
            for (const item of cartItems) {
                if (item.quantity > item.stock) {
                    hasOutOfStock = true;
                    break;
                }
            }
            if (hasOutOfStock) {
                Swal.fire({
                    title: 'Stock Limit Reached',
                    text: 'Some items in your cart are no longer available or exceed current stock. Please review your cart.',
                    icon: 'warning',
                    confirmButtonColor: '#555'
                });
                return;
            }

            // Get the current subtotal and total
            const { subtotal } = updateCartTotals();

            // Store subtotal in session storage to pass to checkout
            sessionStorage.setItem('cartSubtotal', subtotal);

            // Redirect to checkout with loading indication
            Swal.fire({
                title: 'Proceeding to Checkout',
                text: 'Please wait...',
                icon: 'info',
                showConfirmButton: false,
                allowOutsideClick: false,
                willOpen: () => {
                    Swal.showLoading();
                    // Redirect after a short delay to ensure storage is set
                    setTimeout(() => {
                        window.location.href = '/checkout';
                    }, 500);
                }
            });
        } else {
            Swal.fire({
                title: 'Cart Empty',
                text: 'Please add items to your cart before checking out.',
                icon: 'info',
                confirmButtonColor: '#555'
            });
        }
    });

    attachEventListeners();
    updateCartTotals();
});
</script>

<%- include('../../views/partials/user/footer') %>