<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Order Details</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" rel="stylesheet">
    <style>
        body {
            background-color: #f5f5f5;
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            color: #374151;
            margin: 0;
        }
        .order-container {
            background-color: #ffffff;
            border-radius: 16px;
            box-shadow: 0 6px 24px rgba(0, 0, 0, 0.08);
            padding: 2.5rem;
            margin: 2rem auto;
            max-width: 1280px;
        }
        .section-title {
            font-size: 1.75rem;
            font-weight: 700;
            color: #374151;
            border-bottom: 2px solid #d1d5db;
            padding-bottom: 0.5rem;
            margin-bottom: 2rem;
        }
        .order-header {
            background: linear-gradient(180deg, #f5f5f5 0%, #e5e7eb 100%);
            border-radius: 12px;
            padding: 1.75rem;
            margin-bottom: 2.5rem;
        }
        .status-badge {
            font-size: 0.95rem;
            font-weight: 600;
            padding: 0.6rem 1.2rem;
            border-radius: 24px;
            display: inline-flex;
            align-items: center;
            transition: all 0.3s ease;
        }
        .status-Pending { background-color: #e5e7eb; color: #6b7280; }
        .status-Processing { background-color: #d1d5db; color: #374151; }
        .status-Shipped { background-color: #9ca3af; color: #ffffff; }
        .status-Delivered { background-color: #28a745; color: #ffffff; }
        .status-Cancelled { background-color: #dc3545; color: #ffffff; }
        .status-ReturnRequest { background-color: #d1d5db; color: #374151; }
        .status-Returned { background-color: #e5e7eb; color: #6b7280; }
        .status-PaymentFailed { background-color: #ff6b6b; color: #ffffff; }
        .card {
            border: none;
            border-radius: 12px;
            background-color: #f5f5f5;
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }
        .card:hover {
            transform: translateY(-6px);
            box-shadow: 0 8px 160px rgba(0, 0, 0, 0.1);
        }
        .product-item {
            padding: 1.25rem 0;
            border-bottom: 1px solid #e5e7eb;
            transition: background-color 0.3s ease;
        }
        .product-item:hover {
            background-color: #e5e7eb;
        }
        .product-item:last-child {
            border-bottom: none;
        }
        .price-details {
            background-color: #f5f5f5;
            border-radius: 12px;
            padding: 1.75rem;
        }
        .tracking-timeline {
            position: relative;
            padding-left: 3rem;
        }
        .tracking-timeline::before {
            content: '';
            position: absolute;
            left: 1rem;
            top: 0;
            height: 100%;
            width: 3px;
            background: linear-gradient(180deg, #d1d5db 0%, #6b7280 100%);
        }
        .timeline-item {
            position: relative;
            padding-bottom: 2rem;
        }
        .timeline-dot {
            position: absolute;
            left: -2rem;
            top: 0.3rem;
            width: 1.5rem;
            height: 1.5rem;
            border: 3px solid #ffffff;
            border-radius: 50%;
            transition: background-color 0.3s ease;
        }
        .timeline-dot-Pending { background-color: #6b7280; }
        .timeline-dot-Processing { background-color: #9ca3af; }
        .timeline-dot-Shipped { background-color: #9ca3af; }
        .timeline-dot-Delivered { background-color: #28a745; }
        .timeline-dot-Cancelled { background-color: #dc3545; }
        .timeline-dot-ReturnRequest { background-color: #9ca3af; }
        .timeline-dot-Returned { background-color: #6b7280; }
        .timeline-dot-PaymentFailed { background-color: #ff6b6b; }
        .btn {
            border-radius: 8px;
            padding: 0.8rem 1.75rem;
            font-weight: 600;
            transition: all 0.3s ease;
        }
        .btn-primary {
            background-color: #6b7280;
            border-color: #6b7280;
            color: #ffffff;
        }
        .btn-primary:hover {
            background-color: #4b5563;
            border-color: #4b5563;
        }
        .btn-warning {
            background-color: #9ca3af;
            border-color: #9ca3af;
            color: #374151;
        }
        .btn-warning:hover {
            background-color: #6b7280;
            border-color: #6b7280;
            color: #ffffff;
        }
        .btn-danger {
            background-color: #9ca3af;
            border-color: #9ca3af;
            color: #374151;
        }
        .btn-danger:hover {
            background-color: #6b7280;
            border-color: #6b7280;
            color: #ffffff;
        }
        .btn-success {
            background-color: #28a745;
            border-color: #28a745;
            color: #ffffff;
        }
        .btn-success:hover {
            background-color: #218838;
            border-color: #1e7e34;
            color: #ffffff;
        }
        .btn-outline-secondary {
            border-color: #d1d5db;
            color: #6b7280;
        }
        .btn-outline-secondary:hover {
            background-color: #e5e7eb;
            border-color: #9ca3af;
            color: #374151;
        }
        .btn-loading {
            opacity: 0.7;
            pointer-events: none;
            cursor: not-allowed;
        }
        @media (max-width: 768px) {
            .order-container {
                padding: 1.75rem;
            }
            .section-title {
                font-size: 1.5rem;
            }
            .order-header {
                padding: 1.25rem;
            }
            .action-buttons {
                flex-direction: column;
                gap: 0.75rem;
            }
            .btn {
                width: 100%;
                padding: 0.75rem;
            }
            .tracking-timeline {
                padding-left: 2.5rem;
            }
            .timeline-dot {
                left: -1.75rem;
                width: 1.25rem;
                height: 1.25rem;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="order-container">
            <!-- Order Header -->
            <div class="order-header">
                <div class="row align-items-center">
                    <div class="col-md-6">
                        <h2 class="mb-0">Order #<%= order.orderId %></h2>
                        <p class="text-muted mb-0">
                            Placed on <%= new Date(order.createOn).toLocaleDateString('en-US', { 
                                year: 'numeric', 
                                month: 'long', 
                                day: 'numeric' 
                            }) %>
                        </p>
                    </div>
                    <div class="col-md-6 text-md-end mt-3 mt-md-0">
                        <span class="status-badge status-<%= order.status.replace(/\s+/g, '') %>">
                            <%= order.status %>
                        </span>
                    </div>
                </div>
            </div>

            <!-- Order Summary -->
            <div class="row mb-4">
                <div class="col-12">
                    <h4 class="section-title">Order Summary</h4>
                </div>
                <div class="col-md-3 mb-3">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title"><i class="fas fa-calendar-alt me-2"></i>Order Date</h5>
                            <p class="card-text">
                                <%= new Date(order.createOn).toLocaleDateString('en-US', { 
                                    year: 'numeric', 
                                    month: 'long', 
                                    day: 'numeric' 
                                }) %>
                            </p>
                        </div>
                    </div>
                </div>
                <% if (order.invoiceDate) { %>
                <div class="col-md-3 mb-3">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title"><i class="fas fa-file-invoice me-2"></i>Invoice Date</h5>
                            <p class="card-text">
                                <%= new Date(order.invoiceDate).toLocaleDateString('en-US', { 
                                    year: 'numeric', 
                                    month: 'long', 
                                    day: 'numeric' 
                                }) %>
                            </p>
                        </div>
                    </div>
                </div>
                <% } %>
                <div class="col-md-3 mb-3">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title"><i class="fas fa-shopping-cart me-2"></i>Total Items</h5>
                            <p class="card-text"><%= order.items.length %> items</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-3 mb-3">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title"><i class="fas fa-money-bill-wave me-2"></i>Total Amount</h5>
                            <p class="card-text" id="total-amount">
                                ₹<%= order.status === 'Cancelled' ? (order.originalFinalAmount ? order.originalFinalAmount.toFixed(2) : '0.00') : (order.finalAmount ? order.finalAmount.toFixed(2) : '0.00') %>
                            </p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Order Items -->
            <div class="row mb-4">
                <div class="col-12">
                    <h4 class="section-title">Ordered Items</h4>
                    <div class="card">
                        <div class="card-body p-0">
                            <div class="table-responsive">
                                <table class="table mb-0">
                                    <thead>
                                        <tr>
                                            <th scope="col">Product</th>
                                            <th scope="col">Price</th>
                                            <th scope="col">Quantity</th>
                                            <th scope="col" class="text-end">Subtotal</th>
                                            <th scope="col" class="text-end">Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody id="order-items">
                                        <% order.items.forEach((item, index) => { %>
                                        <tr class="product-item" data-item-id="<%= item.productId._id %>">
                                            <td>
                                                <div class="d-flex align-items-center">
                                                    <% if (item.productId && item.productId.productImage && item.productId.productImage.length > 0) { %>
                                                        <img src="<%= item.productId.productImage[0] %>" alt="<%= (item.productId.productName || item.name || 'Product') %>" class="item-img me-3 img-fluid" style="width: 60px; height: 60px; object-fit: cover;">
                                                    <% } else { %>
                                                        <div class="bg-light me-3 d-flex align-items-center justify-content-center" style="width: 60px; height: 60px;">
                                                            <i class="fas fa-box text-muted"></i>
                                                        </div>
                                                    <% } %>
                                                    <div>
                                                        <h6 class="mb-0"><%= item.productId?.productName || item.name || 'Unknown Product' %></h6>
                                                        <% if (item.sku) { %>
                                                            <small class="text-muted">SKU: <%= item.sku %></small>
                                                        <% } %>
                                                        <% if (item.cancelStatus === 'Cancelled') { %>
                                                            <span class="text-danger item-status">Cancelled</span>
                                                        <% } else if (item.returnStatus === 'Requested') { %>
                                                            <span class="text-warning item-status">Return Requested</span>
                                                        <% } else if (item.returnStatus === 'Returned') { %>
                                                            <span class="text-muted item-status">Returned</span>
                                                        <% } else { %>
                                                            <span class="item-status hidden"></span>
                                                        <% } %>
                                                    </div>
                                                </td>
                                                <td class="item-price">₹<%= item.price ? item.price.toFixed(2) : '0.00' %></td>
                                                <td class="item-quantity"><%= item.quantity %></td>
                                                <td class="text-end item-subtotal">₹<%= item.price && item.quantity ? (item.price * item.quantity).toFixed(2) : '0.00' %></td>
                                                <td class="text-end item-actions">
                                                    <% if (order.status !== 'Payment Failed' && ['Pending', 'Processing'].includes(order.status) && item.cancelStatus !== 'Cancelled') { %>
                                                        <button class="btn btn-danger btn-sm cancel-item-btn" 
                                                                data-order-id="<%= order.orderId || '' %>" 
                                                                data-item-id="<%= item.productId._id || '' %>" 
                                                                onclick="cancelItem(this, '<%= order.orderId || '' %>', '<%= item.productId._id || '' %>', '<%= order.status %>')">
                                                            <i class="fas fa-times me-1"></i> Cancel
                                                        </button>
                                                    <% } %>
                                                    <% if (order.status.toLowerCase() === 'delivered' && item.returnStatus === 'Not Requested' && item.cancelStatus !== 'Cancelled') { %>
                                                        <button class="btn btn-warning btn-sm return-item-btn" 
                                                                data-order-id="<%= order.orderId || '' %>" 
                                                                data-item-id="<%= item.productId._id || '' %>" 
                                                                onclick="returnItem(this, '<%= order.orderId || '' %>', '<%= item.productId._id || '' %>', '<%= item.productId?.productName || item.name || '' %>')">
                                                            <i class="fas fa-undo me-1"></i> Return
                                                        </button>
                                                    <% } %>
                                                </td>
                                        </tr>
                                        <% }) %>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Shipping Address & Payment Summary -->
            <div class="row mb-4">
                <div class="col-md-6 mb-3">
                    <h4 class="section-title">Shipping Address</h4>
                    <div class="card">
                        <div class="card-body">
                            <% if (selectedAddress) { %>
                                <h6 class="fw-bold"><%= selectedAddress.name || 'N/A' %></h6>
                                <p class="mb-1"><%= selectedAddress.landMark || 'N/A' %></p>
                                <p class="mb-1">
                                    <%= selectedAddress.city || 'N/A' %>, <%= selectedAddress.state || 'N/A' %> - <%= selectedAddress.pincode || 'N/A' %>
                                </p>
                                <p class="mb-1"><%= selectedAddress.country || 'India' %></p>
                                <p class="mb-0">Phone: <%= selectedAddress.phone || 'N/A' %></p>
                                <% if (selectedAddress.altPhone) { %>
                                    <p class="mb-0">Alternate Phone: <%= selectedAddress.altPhone %></p>
                                <% } %>
                            <% } else { %>
                                <p class="mb-0 text-muted">Address information not available</p>
                            <% } %>
                        </div>
                    </div>
                </div>
                <div class="col-md-6 mb-3">
                    <h4 class="section-title">Payment Summary</h4>
                    <div class="card price-details">
                        <div class="card-body">
                            <div class="d-flex justify-content-between mb-2">
                                <span>Subtotal</span>
                                <span id="subtotal-amount">₹<%= order.subTotal %></span>
                            </div>
                            <% if (order.discount > 0) { %>
                            <div class="d-flex justify-content-between mb-2">
                                <span>Discount</span>
                                <span id="discount-amount">₹<%= order.discount.toFixed(2) %></span>
                            </div>
                            <% } %>
                            <% if (order.couponApplied) { %>
                            <div class="d-flex justify-content-between mb-2">
                                <span>Coupon Applied</span>
                                <span><i class="fas fa-check-circle me-1" style="color: #6b7280;"></i> Yes</span>
                            </div>
                            <% } %>
                            <hr class="my-2">
                            <div class="d-flex justify-content-between fw-bold">
                                <span>Total</span>
                                <span id="final-amount">
                                    ₹<%= order.status === 'Cancelled' ? (order.originalFinalAmount ? order.originalFinalAmount.toFixed(2) : '0.00') : (order.finalAmount ? order.finalAmount.toFixed(2) : '0.00') %>
                                </span>
                            </div>
                            <div class="d-flex justify-content-between mt-2">
                                <span>Payment Status</span>
                                <span class="<%= order.status === 'Payment Failed' ? 'text-danger' : 'text-success' %>">
                                    <%= order.status === 'Payment Failed' ? 'Failed' : 'Completed' %>
                                </span>
                            </div>
                            <% if (order.status === 'Cancelled' && order.originalFinalAmount > 0) { %>
                            <div class="d-flex justify-content-between mt-2 text-success">
                                <span>Refunded to Wallet</span>
                                <span>₹<%= order.originalFinalAmount.toFixed(2) %></span>
                            </div>
                            <% } %>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Order Status Timeline -->
            <div class="row mb-4">
                <div class="col-12">
                    <h4 class="section-title">Order Status</h4>
                    <div class="card">
                        <div class="card-body">
                            <div class="tracking-timeline">
                                <% 
                                const allStatuses = ['Payment Pending', 'Payment Failed', 'Pending', 'Processing', 'Shipped', 'Delivered', 'Cancelled', 'ReturnRequest', 'Returned'];
                                const currentStatusIndex = allStatuses.indexOf(order.status);
                                %>
                                <% if (order.status === 'Payment Failed') { %>
                                    <div class="timeline-item">
                                        <div class="timeline-dot timeline-dot-PaymentFailed"></div>
                                        <div class="timeline-content">
                                            <h5 class="mb-1">Payment Failed</h5>
                                            <p class="text-muted mb-0">Payment attempt unsuccessful</p>
                                        </div>
                                    </div>
                                <% } else if (order.status === 'Cancelled') { %>
                                    <div class="timeline-item">
                                        <div class="timeline-dot timeline-dot-Cancelled"></div>
                                        <div class="timeline-content">
                                            <h5 class="mb-1">Cancelled</h5>
                                            <p class="text-muted mb-0">Order was cancelled</p>
                                        </div>
                                    </div>
                                <% } else if (order.status === 'ReturnRequest' || order.status === 'Returned') { %>
                                    <% allStatuses.forEach((status, index) => { %>
                                        <% if (index <= currentStatusIndex && status !== 'Cancelled' && status !== 'Payment Failed' && status !== 'Payment Pending') { %>
                                            <div class="timeline-item">
                                                <div class="timeline-dot timeline-dot-<%= status.replace(/\s+/g, '') %>"></div>
                                                <div class="timeline-content">
                                                    <h5 class="mb-1"><%= status %></h5>
                                                    <p class="text-muted mb-0">
                                                        <%= index === currentStatusIndex ? 'Current Status' : 'Completed' %>
                                                    </p>
                                                </div>
                                            </div>
                                        <% } %>
                                    <% }); %>
                                <% } else { %>
                                    <% allStatuses.forEach((status, index) => { %>
                                        <% if (index <= currentStatusIndex && status !== 'Cancelled' && status !== 'ReturnRequest' && status !== 'Returned' && status !== 'Payment Failed') { %>
                                            <div class="timeline-item">
                                                <div class="timeline-dot timeline-dot-<%= status.replace(/\s+/g, '') %>"></div>
                                                <div class="timeline-content">
                                                    <h5 class="mb-1"><%= status %></h5>
                                                    <p class="text-muted mb-0">
                                                        <%= index === currentStatusIndex ? 'Current Status' : 'Completed' %>
                                                    </p>
                                                </div>
                                            </div>
                                        <% } %>
                                    <% }); %>
                                <% } %>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Action Buttons -->
            <div class="row">
                <div class="col-12 text-center action-buttons">
                    <% if (['Pending', 'Processing'].includes(order.status)) { %>
                        <button id="cancelOrderBtn" class="btn btn-danger me-2" onclick="cancelOrder('<%= order.orderId %>', '<%= order.status %>')">
                            <i class="fas fa-times me-1"></i> Cancel Entire Order
                        </button>
                    <% } %>
                    <% if (order.status.toLowerCase() === 'delivered' && order.items.some(item => item.returnStatus === 'Not Requested' && item.cancelStatus !== 'Cancelled')) { %>
                        <button id="returnOrderBtn" class="btn btn-warning me-2" onclick="returnEntireOrder('<%= order.orderId %>')">
                            <i class="fas fa-undo me-1"></i> Return Entire Order
                        </button>
                    <% } %>
                   <% if (order.status === 'Payment Failed' && order.paymentMethod === 'razorpay') { %>
    <button class="btn btn-warning me-2" onclick="retryPayment('<%= order._id.toString() %>', <%= order.finalAmount %>)">
        <i class="fas fa-redo me-1"></i> Retry Payment
    </button>
<% } %>

                    <% if (order.status.toLowerCase() === 'delivered') { %>
                        <a href="/download-invoice/<%= order._id %>" class="btn btn-sm me-2" style="background-color: grey; color: #fff; border-radius: 5px; padding: 6px 12px;">
                            <i class="fas fa-download me-1"></i> Download Invoice
                        </a>
                    <% } %>
                    <a onclick="window.history.back();" class="btn btn-outline-secondary">
                        <i class="fas fa-arrow-left me-1"></i> Back to Orders
                    </a>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>

    <script>
        async function cancelOrder(orderId, currentStatus) {
            if (!['Pending', 'Processing'].includes(currentStatus)) {
                Swal.fire({
                    icon: 'error',
                    title: 'Cannot Cancel',
                    text: 'This order cannot be cancelled as it is no longer in Pending or Processing status.',
                    toast: true,
                    position: 'top-end',
                    showConfirmButton: false,
                    timer: 3000,
                    timerProgressBar: true
                });
                return;
            }

            let apiStatus = currentStatus;
            try {
                const statusResponse = await fetch(`/orders/status/${orderId}`, {
                    method: 'GET',
                    headers: { 'Content-Type': 'application/json' }
                });
                if (statusResponse.ok) {
                    const statusData = await statusResponse.json();
                    apiStatus = statusData.status;
                    if (!['Pending', 'Processing'].includes(apiStatus)) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Cannot Cancel',
                            text: 'This order cannot be cancelled as it is no longer in Pending or Processing status.',
                            toast: true,
                            position: 'top-end',
                            showConfirmButton: false,
                            timer: 3000,
                            timerProgressBar: true
                        });
                        return;
                    }
                }
            } catch (error) {
                console.warn('Status endpoint not available or failed:', error);
            }

            const result = await Swal.fire({
                title: 'Cancel Entire Order',
                text: 'Are you sure you want to cancel this entire order? This action cannot be undone.',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#6b7280',
                cancelButtonColor: '#9ca3af',
                confirmButtonText: 'Yes, cancel it',
                cancelButtonText: 'No, keep it'
            });

            if (result.isConfirmed) {
                try {
                    const response = await fetch(`/orders/cancel/${orderId}`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' }
                    });
                    const data = await response.json();

                    if (data.success) {
                        Swal.fire({
                            icon: 'success',
                            title: 'Order Cancelled',
                            text: 'Your entire order has been cancelled successfully.',
                            toast: true,
                            position: 'top-end',
                            showConfirmButton: false,
                            timer: 3000,
                            timerProgressBar: true
                        }).then(() => location.reload());
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Failed',
                            text: data.message || 'Failed to cancel order.',
                            toast: true,
                            position: 'top-end',
                            showConfirmButton: false,
                            timer: 3000,
                            timerProgressBar: true
                        });
                    }
                } catch (error) {
                    console.error('Error cancelling order:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'An error occurred while cancelling the order. Please try again.',
                        toast: true,
                        position: 'top-end',
                        showConfirmButton: false,
                        timer: 3000,
                        timerProgressBar: true
                    });
                }
            }
        }

        async function cancelItem(button, orderId, itemId, currentStatus) {
            if (!orderId || !itemId) {
                Swal.fire({
                    icon: 'error',
                    title: 'Invalid Input',
                    text: 'Order ID or Item ID is missing.',
                    toast: true,
                    position: 'top-end',
                    showConfirmButton: false,
                    timer: 3000,
                    timerProgressBar: true
                });
                return;
            }

            if (!['Pending', 'Processing'].includes(currentStatus)) {
                Swal.fire({
                    icon: 'error',
                    title: 'Cannot Cancel',
                    text: 'This item cannot be cancelled as the order is no longer in Pending or Processing status.',
                    toast: true,
                    position: 'top-end',
                    showConfirmButton: false,
                    timer: 3000,
                    timerProgressBar: true
                });
                return;
            }

            const result = await Swal.fire({
                title: 'Cancel Item',
                text: 'Are you sure you want to cancel this item? This action cannot be undone.',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#6b7280',
                cancelButtonColor: '#9ca3af',
                confirmButtonText: 'Yes, cancel item',
                cancelButtonText: 'No, keep it'
            });

            if (result.isConfirmed) {
                try {
                    const response = await fetch(`/orders/cancel/${orderId}`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ itemId })
                    });
                    const data = await response.json();

                    if (data.success) {
                        const row = button.closest('tr');
                        const statusCell = row.querySelector('.item-status');
                        const actionsCell = row.querySelector('.item-actions');
                        const price = parseFloat(row.querySelector('.item-price').textContent.replace('₹', ''));
                        const quantity = parseInt(row.querySelector('.item-quantity').textContent);
                        const subtotal = price * quantity;

                        statusCell.textContent = 'Cancelled';
                        statusCell.classList.remove('hidden');
                        statusCell.classList.add('text-danger');
                        actionsCell.innerHTML = '';

                        const subtotalElement = document.getElementById('subtotal-amount');
                        const finalAmountElement = document.getElementById('final-amount');
                        const totalAmountElement = document.getElementById('total-amount');
                        let currentSubtotal = parseFloat(subtotalElement.textContent.replace('₹', ''));
                        let currentFinalAmount = parseFloat(finalAmountElement.textContent.replace('₹', ''));

                        currentSubtotal -= subtotal;
                        currentFinalAmount -= subtotal;

                        subtotalElement.textContent = `₹${currentSubtotal.toFixed(2)}`;
                        finalAmountElement.textContent = `₹${currentFinalAmount.toFixed(2)}`;
                        totalAmountElement.textContent = `₹${currentFinalAmount.toFixed(2)}`;

                        const allItems = document.querySelectorAll('#order-items .item-status');
                        const allCancelled = Array.from(allItems).every(status => status.textContent === 'Cancelled');
                        if (allCancelled) {
                            document.querySelector('.status-badge').textContent = 'Cancelled';
                            document.querySelector('.status-badge').className = 'status-badge status-Cancelled';
                            const cancelOrderBtn = document.getElementById('cancelOrderBtn');
                            if (cancelOrderBtn) cancelOrderBtn.remove();
                        }

                        Swal.fire({
                            icon: 'success',
                            title: 'Item Cancelled',
                            text: 'The item has been cancelled successfully.',
                            toast: true,
                            position: 'top-end',
                            showConfirmButton: false,
                            timer: 3000,
                            timerProgressBar: true
                        });
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Failed',
                            text: data.message || 'Failed to cancel item.',
                            toast: true,
                            position: 'top-end',
                            showConfirmButton: false,
                            timer: 3000,
                            timerProgressBar: true
                        });
                    }
                } catch (error) {
                    console.error('Error cancelling item:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'An error occurred while cancelling the item. Please try again.',
                        toast: true,
                        position: 'top-end',
                        showConfirmButton: false,
                        timer: 3000,
                        timerProgressBar: true
                    });
                }
            }
        }

        async function returnItem(button, orderId, itemId, itemName) {
            button.classList.add('btn-loading');
            button.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i> Processing...';

            if (!orderId || !itemId) {
                Swal.fire({
                    icon: 'error',
                    title: 'Invalid Input',
                    text: 'Order ID or Item ID is missing.',
                    toast: true,
                    position: 'top-end',
                    showConfirmButton: false,
                    timer: 3000,
                    timerProgressBar: true
                });
                button.classList.remove('btn-loading');
                button.innerHTML = '<i class="fas fa-undo me-1"></i> Return';
                return;
            }

            const policyResult = await Swal.fire({
                title: `Return Item`,
                html: `
                    <p>Do you want to proceed with the return request?</p>
                `,
                icon: 'info',
                showCancelButton: true,
                confirmButtonColor: '#6b7280',
                cancelButtonColor: '#9ca3af',
                confirmButtonText: 'Proceed',
                cancelButtonText: 'Cancel'
            });

            if (!policyResult.isConfirmed) {
                button.classList.remove('btn-loading');
                button.innerHTML = '<i class="fas fa-undo me-1"></i> Return';
                return;
            }

            const result = await Swal.fire({
                title: `Return Item`,
                input: 'textarea',
                inputLabel: 'Reason for Return',
                inputPlaceholder: 'Type your reason here...',
                inputAttributes: {
                    'aria-label': 'Reason for return'
                },
                showCancelButton: true,
                confirmButtonText: 'Submit Return Request',
                cancelButtonText: 'Cancel',
                confirmButtonColor: '#6b7280',
                cancelButtonColor: '#9ca3af',
                inputValidator: (value) => {
                    if (!value) {
                        return 'You need to write a reason!';
                    }
                    if (value.length < 10) {
                        return 'Reason must be at least 10 characters long!';
                    }
                }
            });

            if (result.isConfirmed) {
                const returnReason = result.value;
                try {
                    const response = await fetch(`/orders/return/${orderId}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ itemId, reason: returnReason })
                    });
                    const data = await response.json();

                    if (data.success) {
                        const row = button.closest('tr');
                        const statusCell = row.querySelector('.item-status');
                        const actionsCell = row.querySelector('.item-actions');

                        statusCell.textContent = 'Return Requested';
                        statusCell.classList.remove('hidden');
                        statusCell.classList.add('text-warning');
                        actionsCell.innerHTML = '';

                        const orderStatusBadge = document.querySelector('.status-badge');
                        if (!orderStatusBadge.textContent.includes('Return')) {
                            orderStatusBadge.textContent = 'Return Request';
                            orderStatusBadge.className = 'status-badge status-ReturnRequest';
                        }

                        const timelineContainer = document.querySelector('.tracking-timeline');
                        timelineContainer.innerHTML += `
                            <div class="timeline-item">
                                <div class="timeline-dot timeline-dot-ReturnRequest"></div>
                                <div class="timeline-content">
                                    <h5 class="mb-1">Return Request</h5>
                                    <p class="text-muted mb-0">Return request submitted for ${itemName}</p>
                                </div>
                            </div>
                        `;

                        const allItems = document.querySelectorAll('#order-items .item-status');
                        const allReturned = Array.from(allItems).every(status => status.textContent === 'Return Requested' || status.textContent === 'Returned' || status.textContent === 'Cancelled');
                        if (allReturned) {
                            const returnOrderBtn = document.getElementById('returnOrderBtn');
                            if (returnOrderBtn) returnOrderBtn.remove();
                        }

                        Swal.fire({
                            icon: 'success',
                            title: 'Return Request Submitted',
                            text: 'Your return request has been submitted successfully. You will be notified once it is processed.',
                            toast: true,
                            position: 'top-end',
                            showConfirmButton: false,
                            timer: 3000,
                            timerProgressBar: true
                        });
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: data.message || 'Failed to submit return request.',
                            toast: true,
                            position: 'top-end',
                            showConfirmButton: false,
                            timer: 3000,
                            timerProgressBar: true
                        });
                    }
                } catch (error) {
                    console.error('Error processing return request:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'An error occurred while processing the return request.',
                        toast: true,
                        position: 'top-end',
                        showConfirmButton: false,
                        timer: 3000,
                        timerProgressBar: true
                    });
                }
            }

            button.classList.remove('btn-loading');
            button.innerHTML = '<i class="fas fa-undo me-1"></i> Return';
        }

        async function returnEntireOrder(orderId) {
            const button = document.getElementById('returnOrderBtn');
            button.classList.add('btn-loading');
            button.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i> Processing...';

            if (!orderId) {
                Swal.fire({
                    icon: 'error',
                    title: 'Invalid Input',
                    text: 'Order ID is missing.',
                    toast: true,
                    position: 'top-end',
                    showConfirmButton: false,
                    timer: 3000,
                    timerProgressBar: true
                });
                button.classList.remove('btn-loading');
                button.innerHTML = '<i class="fas fa-undo me-1"></i> Return Entire Order';
                return;
            }

            const policyResult = await Swal.fire({
                title: 'Return Entire Order',
                html: `
                    <p>Do you want to proceed with the return request for the entire order?</p>
                `,
                icon: 'info',
                showCancelButton: true,
                confirmButtonColor: '#6b7280',
                cancelButtonColor: '#9ca3af',
                confirmButtonText: 'Proceed',
                cancelButtonText: 'Cancel'
            });

            if (!policyResult.isConfirmed) {
                button.classList.remove('btn-loading');
                button.innerHTML = '<i class="fas fa-undo me-1"></i> Return Entire Order';
                return;
            }

            const result = await Swal.fire({
                title: 'Return Entire Order',
                input: 'textarea',
                inputLabel: 'Reason for Return',
                inputPlaceholder: 'Type your reason here...',
                inputAttributes: {
                    'aria-label': 'Reason for return'
                },
                showCancelButton: true,
                confirmButtonText: 'Submit Return Request',
                cancelButtonText: 'Cancel',
                confirmButtonColor: '#6b7280',
                cancelButtonColor: '#9ca3af',
                inputValidator: (value) => {
                    if (!value) {
                        return 'You need to write a reason!';
                    }
                    if (value.length < 10) {
                        return 'Reason must be at least 10 characters long!';
                    }
                }
            });

            if (result.isConfirmed) {
                const returnReason = result.value;
                try {
                    const response = await fetch(`/orders/return/${orderId}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ reason: returnReason })
                    });
                    const data = await response.json();

                    if (data.success) {
                        document.querySelectorAll('#order-items .product-item').forEach(row => {
                            const statusCell = row.querySelector('.item-status');
                            const actionsCell = row.querySelector('.item-actions');
                            if (statusCell.textContent !== 'Cancelled') {
                                statusCell.textContent = 'Return Requested';
                                statusCell.classList.remove('hidden');
                                statusCell.classList.add('text-warning');
                                actionsCell.innerHTML = '';
                            }
                        });

                        const orderStatusBadge = document.querySelector('.status-badge');
                        orderStatusBadge.textContent = 'Return Request';
                        orderStatusBadge.className = 'status-badge status-ReturnRequest';

                        const timelineContainer = document.querySelector('.tracking-timeline');
                        timelineContainer.innerHTML += `
                            <div class="timeline-item">
                                <div class="timeline-dot timeline-dot-ReturnRequest"></div>
                                <div class="timeline-content">
                                    <h5 class="mb-1">Return Request</h5>
                                    <p class="text-muted mb-0">Return request submitted for entire order</p>
                                </div>
                            </div>
                        `;

                        button.remove();

                        Swal.fire({
                            icon: 'success',
                            title: 'Return Request Submitted',
                            text: 'Your return request for the entire order has been submitted successfully. You will be notified once it is processed.',
                            toast: true,
                            position: 'top-end',
                            showConfirmButton: false,
                            timer: 3000,
                            timerProgressBar: true
                        });
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: data.message || 'Failed to submit return request.',
                            toast: true,
                            position: 'top-end',
                            showConfirmButton: false,
                            timer: 3000,
                            timerProgressBar: true
                        });
                    }
                } catch (error) {
                    console.error('Error processing return request:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'An error occurred while processing the return request.',
                        toast: true,
                        position: 'top-end',
                        showConfirmButton: false,
                        timer: 3000,
                        timerProgressBar: true
                    });
                }
            }

            button.classList.remove('btn-loading');
            button.innerHTML = '<i class="fas fa-undo me-1"></i> Return Entire Order';
        }

        async function retryPayment(orderId, amount) {
            try {
                console.log('Initiating retry payment for orderId:', orderId, 'Amount:', amount);
                if (!orderId || typeof orderId !== 'string' || isNaN(amount) || amount <= 0) {
                    throw new Error('Invalid order ID or amount');
                }

                const response = await fetch('/retry-payment', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ orderId, amount })
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || `HTTP error! Status: ${response.status}`);
                }

                const data = await response.json();
                console.log('Response data:', data);

                if (data.success && data.paymentMethod === 'razorpay') {
                    const rzp = new Razorpay({
                        ...data.razorpayOptions,
                        handler: async (response) => {
                            console.log('Razorpay payment response:', response);
                            const verifyResponse = await fetch('/verify-razorpay-payment', {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify({
                                    orderId,
                                    razorpayOrderId: response.razorpay_order_id,
                                    razorpayPaymentId: response.razorpay_payment_id,
                                    razorpaySignature: response.razorpay_signature
                                })
                            });
                            const verifyData = await verifyResponse.json();
                            console.log('Verification response:', verifyData);
                            if (verifyData.success) {
                                Swal.fire({
                                    icon: 'success',
                                    title: 'Payment Successful',
                                    text: 'Redirecting to order success page...'
                                }).then(() => {
                                    console.log('Redirecting to order-success page with orderId:', orderId);
                                    window.location.href = `/order-success/${orderId}`;
                                });
                            } else {
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Payment Verification Failed',
                                    text: verifyData.message || 'Unable to verify payment. Please try again.'
                                }).then(() => {
                                    window.location.reload();
                                });
                            }
                        }
                    });

                    rzp.on('payment.failed', async (response) => {
                        console.log('Payment failed:', response);
                        await fetch('/handle-payment-failure', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({
                                orderId,
                                failureReason: response.error.description || 'Payment failed'
                            })
                        });
                        Swal.fire({
                            icon: 'error',
                            title: 'Payment Failed Again',
                            text: 'Please try again or use a different payment method.'
                        }).then(() => {
                            window.location.reload();
                        });
                    });

                    console.log('Opening Razorpay payment modal');
                    rzp.open();
                } else {
                    console.log('Retry payment failed:', data.message);
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: data.message || 'Failed to initiate retry payment.'
                    });
                }
            } catch (error) {
                console.error('Error in retryPayment:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'An error occurred while retrying payment: ' + error.message
                });
            }
        }
    </script>
</body>
</html>